apply plugin: 'com.android.application'
apply plugin: 'jacoco'

repositories {
    maven {
        url "https://mint.splunk.com/gradle/"
    }
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "org.digitalcampus.mobile.learning"
        minSdkVersion 14
        targetSdkVersion 23

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'README.md'
    }

    lintOptions {
        checkReleaseBuilds true
        // Disable checks for String translations
        disable 'MissingTranslation', 'ExtraTranslation'
    }

    def Properties runtimeProps = new Properties()
    runtimeProps.load(new FileInputStream(rootProject.file('oppia-default.properties')))

    def oppiaPropsFile = rootProject.file('custom.properties')
    if (oppiaPropsFile.canRead()) {
        logger.info('Fetching properties from external file')
        runtimeProps.load(new FileInputStream(oppiaPropsFile))
    } else {
        logger.error('No properties file found. Using default values.')
    }

    buildTypes {

        all {
            //Define all the constant values that depend on the config properties
            buildConfigField "String", "MINT_API_KEY", "\"" + runtimeProps['MINT_API_KEY'] + "\""
            buildConfigField "boolean", "ADMIN_PROTECT_SETTINGS", runtimeProps['ADMIN_PROTECT_SETTINGS']
            buildConfigField "boolean", "ADMIN_PROTECT_COURSE_DELETE", runtimeProps['ADMIN_PROTECT_COURSE_DELETE']
            buildConfigField "boolean", "ADMIN_PROTECT_COURSE_RESET", runtimeProps['ADMIN_PROTECT_COURSE_RESET']
            buildConfigField "boolean", "ADMIN_PROTECT_COURSE_INSTALL", runtimeProps['ADMIN_PROTECT_COURSE_INSTALL']
            buildConfigField "boolean", "ADMIN_PROTECT_COURSE_UPDATE", runtimeProps['ADMIN_PROTECT_COURSE_UPDATE']
            buildConfigField "boolean", "MENU_ALLOW_LOGOUT", runtimeProps['MENU_ALLOW_LOGOUT']
            buildConfigField "boolean", "MENU_ALLOW_MONITOR", runtimeProps['MENU_ALLOW_MONITOR']
            buildConfigField "boolean", "MENU_ALLOW_SETTINGS", runtimeProps['MENU_ALLOW_SETTINGS']
            buildConfigField "boolean", "MENU_ALLOW_COURSE_DOWNLOAD", runtimeProps['MENU_ALLOW_COURSE_DOWNLOAD']
            buildConfigField "boolean", "DEVICEADMIN_ENABLED", runtimeProps['DEVICEADMIN_ENABLED']
            buildConfigField "boolean", "SESSION_EXPIRATION_ENABLED", runtimeProps['SESSION_EXPIRATION_ENABLED']
            buildConfigField "int", "SESSION_EXPIRATION_TIMEOUT", runtimeProps['SESSION_EXPIRATION_TIMEOUT']
            buildConfigField "int", "DOWNLOAD_COURSES_DISPLAY", runtimeProps['DOWNLOAD_COURSES_DISPLAY']

            resValue "string", "MENU_ALLOW_LOGOUT_DEFAULT_VALUE", runtimeProps['MENU_ALLOW_LOGOUT']
            resValue "string", "prefServerDefault", runtimeProps['OPPIA_SERVER_DEFAULT']
        }

        debug {
            testCoverageEnabled = true

        }

        release {
            minifyEnabled false
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    androidTestCompile('com.android.support.test.espresso:espresso-contrib:2.2.1') {
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
        exclude module: 'support-v13'
        exclude module: 'recyclerview-v7'
    }
    compile 'joda-time:joda-time:2.3'
    compile 'com.android.support:design:23.4.0'
    compile 'com.androidplot:androidplot-core:0.6.1'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.squareup.okhttp3:okhttp:3.3.1'
    compile 'com.splunk.mint:mint:5.0.0'
    compile 'com.google.android.gms:play-services-gcm:10.0.1'
    compile 'com.android.support:support-v4:23.4.0'
    testCompile 'junit:junit:4.12'
    androidTestCompile 'com.squareup.okhttp3:mockwebserver:3.3.1'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile 'com.android.support:support-annotations:24.0.0'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
}
apply plugin: 'com.google.gms.google-services'

task grantPermissions(dependsOn: 'installDebug') {
    def adb = android.getAdbExe().toString()

    println "Granting permissions on device"
    "${adb} shell pm grant org.digitalcampus.mobile.learning android.permission.READ_PHONE_STATE".execute()
    "${adb} shell pm grant org.digitalcampus.mobile.learning android.permission.READ_EXTERNAL_STORAGE".execute()
    "${adb} shell pm grant org.digitalcampus.mobile.learning android.permission.WRITE_EXTERNAL_STORAGE".execute()
}

afterEvaluate {
    tasks.each { task ->
        if (task.name.startsWith('assembleDebugAndroidTest')) {
            task.dependsOn grantPermissions
        }
    }
}


